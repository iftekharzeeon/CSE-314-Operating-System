diff --git a/.gitignore b/.gitignore
index 07216f3..0bddea9 100644
--- a/.gitignore
+++ b/.gitignore
@@ -15,3 +15,4 @@ mkfs
 kernel/kernel
 user/usys.S
 .gdbinit
+.vscode/
diff --git a/1805038_paging.patch b/1805038_paging.patch
new file mode 100644
index 0000000..e69de29
diff --git a/Makefile b/Makefile
index 39a99d7..f60ca18 100644
--- a/Makefile
+++ b/Makefile
@@ -24,6 +24,7 @@ OBJS = \
   $K/sleeplock.o \
   $K/file.o \
   $K/pipe.o \
+  $K/swap.o \
   $K/exec.o \
   $K/sysfile.o \
   $K/kernelvec.o \
@@ -132,6 +133,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_test1\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..0f38767 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,8 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct swap;
+struct live_page_info; //For storing the information of the live pages
 
 // bio.c
 void            binit(void);
@@ -36,6 +38,8 @@ int             filewrite(struct file*, uint64, int n);
 
 // fs.c
 void            fsinit(int);
+uint            balloc(uint dev);
+void            bfree(int dev, uint b);
 int             dirlink(struct inode*, char*, uint);
 struct inode*   dirlookup(struct inode*, char*, uint*);
 struct inode*   ialloc(uint, short);
@@ -63,6 +67,7 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+void            init_live_page_info(void);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -107,6 +112,13 @@ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
 
+// swap.c
+void            swapinit(void);
+void            swapfree(struct swap*);
+struct swap*    swapalloc(void);
+void            swapout(struct swap *dst_sp, char *src_pa);
+void            swapin(char *dst_pa, struct swap *src_sp);
+
 // swtch.S
 void            swtch(struct context*, struct context*);
 
@@ -173,6 +185,9 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+void            add_live_page(pagetable_t, uint64, uint64);
+int             swap_out_page();
+struct live_page_info* get_to_swap_page(void);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/fs.c b/kernel/fs.c
index c6bab15..2d9b419 100644
--- a/kernel/fs.c
+++ b/kernel/fs.c
@@ -62,7 +62,7 @@ bzero(int dev, int bno)
 
 // Allocate a zeroed disk block.
 // returns 0 if out of disk space.
-static uint
+uint
 balloc(uint dev)
 {
   int b, bi, m;
@@ -88,7 +88,7 @@ balloc(uint dev)
 }
 
 // Free a disk block.
-static void
+void
 bfree(int dev, uint b)
 {
   struct buf *bp;
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..647869d 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -8,6 +8,7 @@
 #include "spinlock.h"
 #include "riscv.h"
 #include "defs.h"
+#include "swap.h"
 
 void freerange(void *pa_start, void *pa_end);
 
@@ -27,7 +28,10 @@ void
 kinit()
 {
   initlock(&kmem.lock, "kmem");
+  initlock(&live_page_lock, "live_page");
   freerange(end, (void*)PHYSTOP);
+  init_live_page_info();
+  swapinit();
 }
 
 void
@@ -39,6 +43,22 @@ freerange(void *pa_start, void *pa_end)
     kfree(p);
 }
 
+void
+init_live_page_info(void)
+{
+    acquire(&live_page_lock);
+  for (int i = 0; i < MAXPHYPAGES; i++) {
+    live_pages[i].pa = 0;
+    live_pages[i].serial = 0;
+    live_pages[i].va = 0;
+    live_pages[i].valid = 0;
+  }
+
+  live_page_count = 0;
+  current_serial = 0;
+  release(&live_page_lock);
+}
+
 // Free the page of physical memory pointed at by pa,
 // which normally should have been returned by a
 // call to kalloc().  (The exception is when
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..7210e7c 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -288,12 +288,15 @@ fork(void)
     return -1;
   }
 
+  release(&np->lock);
+
   // Copy user memory from parent to child.
   if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
     freeproc(np);
-    release(&np->lock);
+    
     return -1;
   }
+  acquire(&np->lock);
   np->sz = p->sz;
 
   // copy saved user registers.
@@ -414,9 +417,9 @@ wait(uint64 addr)
             release(&wait_lock);
             return -1;
           }
-          freeproc(pp);
           release(&pp->lock);
           release(&wait_lock);
+          freeproc(pp);
           return pid;
         }
         release(&pp->lock);
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..e8b8f1c 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -344,6 +344,8 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
 
+#define PTE_S (1L << 8) // Page is swapped
+
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
 
diff --git a/kernel/spinlock.h b/kernel/spinlock.h
index 4392820..27176eb 100644
--- a/kernel/spinlock.h
+++ b/kernel/spinlock.h
@@ -1,3 +1,7 @@
+//If not define, define
+#ifndef SPINLOCK_H
+#define SPINLOCK_H
+
 // Mutual exclusion lock.
 struct spinlock {
   uint locked;       // Is the lock held?
@@ -7,3 +11,4 @@ struct spinlock {
   struct cpu *cpu;   // The cpu holding the lock.
 };
 
+#endif // SPINLOCK_H
diff --git a/kernel/swap.c b/kernel/swap.c
new file mode 100644
index 0000000..f33bf40
--- /dev/null
+++ b/kernel/swap.c
@@ -0,0 +1,135 @@
+#include "types.h"
+#include "riscv.h"
+#include "fs.h"
+#include "spinlock.h"
+#include "defs.h"
+#include "param.h"
+#include "sleeplock.h"
+#include "buf.h"
+
+#define NBLOCKPERPAGE (PGSIZE / BSIZE)
+
+struct swap {
+  uint blocknos[NBLOCKPERPAGE];
+};
+
+struct run {
+  struct run *next;
+};
+
+struct {
+  struct spinlock lock;
+  struct run *freelist;
+} swapmem;
+
+// Initialize swapmem
+void
+swapinit(void)
+{
+  initlock(&swapmem.lock, "swapmem");
+  swapmem.freelist = 0;
+}
+
+// Allocate one swap struct.
+// Returns a pointer to the swap struct.
+// Returns 0 if the memory cannot be allocated.
+struct swap *
+swapalloc(void)
+{
+  struct run *r;
+  struct swap *s;
+
+  acquire(&swapmem.lock);
+  r = swapmem.freelist;
+  if(!r){
+    release(&swapmem.lock);
+    char *mem = kalloc();
+    char *mem_end = mem + PGSIZE;
+    for(; mem + sizeof(struct swap) <= mem_end; mem += sizeof(struct swap)){
+      r = (struct run*)mem;
+
+      acquire(&swapmem.lock);
+      r->next = swapmem.freelist;
+      swapmem.freelist = r;
+      release(&swapmem.lock);
+    }
+    acquire(&swapmem.lock);
+    r = swapmem.freelist;
+  }
+  swapmem.freelist = r->next;
+  release(&swapmem.lock);
+  
+  s = (struct swap*)r;
+  if(s)
+    memset((char*)s->blocknos, 0, sizeof(s->blocknos)); // fill with zeros
+  
+  return s;
+}
+
+// Free the swap struct pointed by s, and the blocks
+// contained in s, which normally should have been returned
+// by a call to swapalloc() and swapout().
+void
+swapfree(struct swap *s)
+{
+  uint *blockno;
+  struct run *r;
+
+  if(!s)
+    panic("swapfree");
+  
+  begin_op();
+  for(blockno = s->blocknos; blockno < &s->blocknos[NBLOCKPERPAGE]; blockno++){
+    if(*blockno)
+      bfree(ROOTDEV, *blockno);
+  }
+  end_op();
+
+  r = (struct run*)s;
+
+  acquire(&swapmem.lock);
+  r->next = swapmem.freelist;
+  swapmem.freelist = r;
+  release(&swapmem.lock);
+}
+
+// Swap out a given physical page src_pa to disk.
+// The metadata for retriving src_pa will be saved
+// to dst_pa which normally should have been returned
+// by a call to swapalloc().
+void
+swapout(struct swap *dst_sp, char *src_pa)
+{
+  uint *blockno;
+  struct buf *bp;
+  
+  begin_op();
+  for(blockno = dst_sp->blocknos; blockno < &dst_sp->blocknos[NBLOCKPERPAGE]; blockno++, src_pa += BSIZE){
+    *blockno = balloc(ROOTDEV);
+    if(*blockno == 0)
+      panic("swapout");
+    bp = bread(ROOTDEV, *blockno);
+    memmove(bp->data, src_pa, BSIZE);
+    log_write(bp);
+    brelse(bp);
+  }
+  end_op();
+}
+
+// Swap in a page into dst_pa from disk using src_sp.
+// src_sp should normally be updated with metadata
+// for retriving the page by a call to swapout().
+void
+swapin(char *dst_pa, struct swap *src_sp)
+{
+  uint *blockno;
+  struct buf *bp;
+  
+  if(!dst_pa)
+    panic("swapin");
+  for(blockno = src_sp->blocknos; blockno < &src_sp->blocknos[NBLOCKPERPAGE]; blockno++, dst_pa += BSIZE){
+    bp = bread(ROOTDEV, *blockno);
+    memmove(dst_pa, bp->data, BSIZE);
+    brelse(bp);
+  }
+}
diff --git a/kernel/swap.h b/kernel/swap.h
new file mode 100644
index 0000000..93fa0d0
--- /dev/null
+++ b/kernel/swap.h
@@ -0,0 +1,21 @@
+
+#include "types.h"
+#include "param.h"
+#include "defs.h"
+#include "spinlock.h"
+
+#define MAXPHYPAGES 50  // maximum number of live physical pages
+
+struct live_page_info {
+  pagetable_t pagetable;
+  uint64 va;
+  uint64 pa;
+  int valid;
+  int serial;
+};
+
+static struct live_page_info live_pages[MAXPHYPAGES];
+static struct spinlock live_page_lock;
+
+static uint64 live_page_count;
+static uint64 current_serial;
\ No newline at end of file
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..13f1cd7 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -65,7 +65,52 @@ usertrap(void)
     intr_on();
 
     syscall();
-  } else if((which_dev = devintr()) != 0){
+  } else if (r_scause() == 13 || r_scause() == 15) {
+    //Page fault
+    printf("Page fault occured\n");
+    uint64 va = r_stval();
+    va = PGROUNDDOWN(va);
+    pte_t *pte;
+    pte = walk(p->pagetable, va, 0);
+
+    if (pte == 0) {
+      printf("Page fault: no page found\n");
+      exit(-1);
+    }
+
+    if (*pte & PTE_S) {
+      printf("Swapped page caught page fault. Trying to swap in\n");
+
+      struct proc *p = myproc();
+
+      struct swap* swapped = (struct swap*) (*pte >> 10);
+
+      uint flags = PTE_FLAGS(*pte);
+      flags &= ~PTE_S;
+      flags |= PTE_V;
+
+      char* mem = kalloc();
+      if (mem == 0) {
+        printf("Out of memory\n");
+        exit(-1);
+      }
+
+      add_live_page(p->pagetable, (uint64)mem, va);
+      swapin(mem, swapped);
+
+      sfence_vma();
+
+      if (mappages(p->pagetable, va, PGSIZE, (uint64)mem, flags) != 0) {
+        printf("Out of memory\n");
+        exit(-1);
+      }
+      swapfree(swapped);
+
+      printf("Swapped in page\n");
+
+    }
+  }
+   else if((which_dev = devintr()) != 0){
     // ok
   } else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..20884ae 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -5,6 +5,7 @@
 #include "riscv.h"
 #include "defs.h"
 #include "fs.h"
+#include "swap.h"
 
 /*
  * the kernel's page table.
@@ -179,16 +180,36 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
   for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
     if((pte = walk(pagetable, a, 0)) == 0)
       panic("uvmunmap: walk");
-    if((*pte & PTE_V) == 0)
+    if(((*pte & PTE_V) == 0) && ((*pte & PTE_S) == 0))
       panic("uvmunmap: not mapped");
     if(PTE_FLAGS(*pte) == PTE_V)
       panic("uvmunmap: not a leaf");
     if(do_free){
       uint64 pa = PTE2PA(*pte);
-      kfree((void*)pa);
+
+      //Check if the page is swapped or not
+      if (*pte & PTE_S) {
+        //Page is already swapped
+        struct swap* swapped = (struct swap*) (*pte >> 10);
+        swapfree(swapped);
+      } else {
+        //Page is not swapped
+        acquire(&live_page_lock);
+        for (int i = 0; i < MAXPHYPAGES; i++) {
+          if (live_pages[i].valid == 1 && live_pages[i].pa == pa)
+            {
+              live_pages[i].valid = 0;
+              live_page_count--;
+              break;
+            }
+        }
+        release(&live_page_lock);
+        kfree((void*)pa);
+      }
     }
     *pte = 0;
   }
+  printf("Number of live pages: %d\n", live_page_count);
 }
 
 // create an empty user page table.
@@ -220,6 +241,93 @@ uvmfirst(pagetable_t pagetable, uchar *src, uint sz)
   memmove(mem, src, sz);
 }
 
+int 
+swap_out_page() {
+  //Get the page to swap out
+  struct live_page_info *page_to_swap = get_to_swap_page();
+  pte_t *pte;
+  pte = walk(page_to_swap->pagetable, page_to_swap->va, 0);
+  if (pte == 0) {
+    printf("PTE is 0. Swap failed.\n");
+    return -1;
+  }
+
+  uint flags = PTE_FLAGS(*pte);
+
+  flags &= ~PTE_V;
+  flags |= PTE_S;
+  
+  struct swap* swap_address = swapalloc();
+
+  if (swap_address == 0) {
+    printf("Swap address is 0. Swap failed.\n");
+    return -1;
+  }
+
+  swapout(swap_address, (char *)page_to_swap->pa);
+
+  *pte = ((((uint64)swap_address) << 10) | flags);
+
+  kfree((void*)page_to_swap->pa);
+
+  printf("Swapped out page at va: %p", page_to_swap->va);
+
+  return 0;
+
+}
+
+struct live_page_info*
+get_to_swap_page() {
+  //Find the page with the lowest serial number
+  int min_serial = 0;
+  int min_index = 0;
+  acquire(&live_page_lock);
+  for (int i = 0; i < MAXPHYPAGES; i++) {
+    if (live_pages[i].valid == 1) {
+      if (live_pages[i].serial < min_serial) {
+        min_serial = live_pages[i].serial;
+        min_index = i;
+      }
+    }
+  }
+
+  live_pages[min_index].valid = 0;
+  live_pages[min_index].serial = -1;
+  live_page_count--;
+  release(&live_page_lock);
+
+  //Return the page
+  return &live_pages[min_index];
+}
+
+void
+add_live_page(pagetable_t pagetable, uint64 pa, uint64 va) {
+  //First check if the array exceeds max size
+  if (live_page_count >= MAXPHYPAGES) {
+    printf("50 live pages exceeded. Time to swap out.\n");
+    //Call swap out function
+    if(swap_out_page() == 0) {
+      printf("Swapped out page successfully.\n");
+    } else {
+      printf("Swapped out page failed.\n");
+    }
+  }
+  //Add the page to the array
+  acquire(&live_page_lock);
+  for (int i = 0; i < MAXPHYPAGES; i++) {
+    if (live_pages[i].valid == 0) {
+      live_pages[i].va = va;
+      live_pages[i].pa = pa;
+      live_pages[i].valid = 1;
+      live_pages[i].pagetable = pagetable;
+      live_pages[i].serial = current_serial++;
+      live_page_count++;
+      break;
+    }
+  }
+  release(&live_page_lock);
+}
+
 // Allocate PTEs and physical memory to grow process from oldsz to
 // newsz, which need not be page aligned.  Returns new size or 0 on error.
 uint64
@@ -238,6 +346,15 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
       uvmdealloc(pagetable, a, oldsz);
       return 0;
     }
+
+    if ((xperm & PTE_X ) == 0) {
+      // Meaning the process is not executable
+      // Add the page to the live page array
+      add_live_page(pagetable, (uint64)mem, a);
+    }
+
+    printf("Number of live pages: %d\n", live_page_count);
+
     memset(mem, 0, PGSIZE);
     if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_R|PTE_U|xperm) != 0){
       kfree(mem);
diff --git a/user/test1.c b/user/test1.c
new file mode 100644
index 0000000..708f7cb
--- /dev/null
+++ b/user/test1.c
@@ -0,0 +1,13 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+    char *i = sbrk(4096 * 100);
+    *((int *)i) = 10000;
+    printf("Hello %d\n", *i);
+    return 0;
+}
\ No newline at end of file
diff --git a/user/testingfork.c b/user/testingfork.c
new file mode 100644
index 0000000..f550c2b
--- /dev/null
+++ b/user/testingfork.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+void main(int argc, char *argv[])
+{
+    char *i = sbrk(4096 * 100);
+    *((int *)i) = 23;
+    printf("Hello World %d\n", *i);
+
+    int pid = fork();
+    
+    printf("fork starting\n");
+    if (pid == 0)
+    {
+        printf("in child process: previous i = %d\n", *i);
+        *i = 10;
+        printf("in child process: new i = %d\n", *i);
+        exit(0);
+    } else {
+        wait(0);
+        printf("in parent: i = %d\n", *i);
+    }
+
+    exit(0);
+}
\ No newline at end of file
