diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..c530043
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,7 @@
+{
+    "files.associations": {
+        "user.h": "c",
+        "pstat.h": "c",
+        "riscv.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/1805038.patch b/1805038.patch
new file mode 100644
index 0000000..b8fd7d9
--- /dev/null
+++ b/1805038.patch
@@ -0,0 +1,363 @@
+diff --git a/Makefile b/Makefile
+index 39a99d7..dc414c2 100644
+--- a/Makefile
++++ b/Makefile
+@@ -28,7 +28,8 @@ OBJS = \
+   $K/sysfile.o \
+   $K/kernelvec.o \
+   $K/plic.o \
+-  $K/virtio_disk.o
++  $K/virtio_disk.o \
++  $K/rand.o
+ 
+ # riscv64-unknown-elf- or riscv64-linux-gnu-
+ # perhaps in /opt/riscv/bin
+@@ -132,6 +133,9 @@ UPROGS=\
+ 	$U/_grind\
+ 	$U/_wc\
+ 	$U/_zombie\
++	$U/_testticket\
++	$U/_testprocinfo\
++	$U/_testing\
+ 
+ fs.img: mkfs/mkfs README $(UPROGS)
+ 	mkfs/mkfs fs.img README $(UPROGS)
+@@ -153,7 +157,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
+ 	then echo "-gdb tcp::$(GDBPORT)"; \
+ 	else echo "-s -p $(GDBPORT)"; fi)
+ ifndef CPUS
+-CPUS := 3
++CPUS := 1
+ endif
+ 
+ QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
+diff --git a/kernel/defs.h b/kernel/defs.h
+index a3c962b..1388ec2 100644
+--- a/kernel/defs.h
++++ b/kernel/defs.h
+@@ -8,6 +8,7 @@ struct spinlock;
+ struct sleeplock;
+ struct stat;
+ struct superblock;
++struct pstat;
+ 
+ // bio.c
+ void            binit(void);
+@@ -106,6 +107,8 @@ void            yield(void);
+ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
+ int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
+ void            procdump(void);
++int             settickets(int ticket_number);
++int             getpinfo(uint64 addr);
+ 
+ // swtch.S
+ void            swtch(struct context*, struct context*);
+diff --git a/kernel/proc.c b/kernel/proc.c
+index 959b778..fc2c565 100644
+--- a/kernel/proc.c
++++ b/kernel/proc.c
+@@ -5,6 +5,8 @@
+ #include "spinlock.h"
+ #include "proc.h"
+ #include "defs.h"
++#include "rand.h"
++#include "pstat.h"
+ 
+ struct cpu cpus[NCPU];
+ 
+@@ -56,6 +58,7 @@ procinit(void)
+       p->state = UNUSED;
+       p->kstack = KSTACK((int) (p - proc));
+   }
++  // sgenrand(unixtime()); //Seed with current time
+ }
+ 
+ // Must be called with interrupts disabled,
+@@ -124,6 +127,8 @@ allocproc(void)
+ found:
+   p->pid = allocpid();
+   p->state = USED;
++  p->originalTickets = 1;
++  p->currentTickets = 1;
+ 
+   // Allocate a trapframe page.
+   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
+@@ -169,6 +174,8 @@ freeproc(struct proc *p)
+   p->killed = 0;
+   p->xstate = 0;
+   p->state = UNUSED;
++  p->originalTickets = 0;
++  p->currentTickets = 0;
+ }
+ 
+ // Create a user page table for a given process, with no user memory,
+@@ -434,6 +441,22 @@ wait(uint64 addr)
+   }
+ }
+ 
++int
++getTotalTickets()
++{
++  struct proc *p;
++  int totalTickets = 0;
++  for(p = proc; p < &proc[NPROC]; p++) {
++    acquire(&p->lock);
++    if (p->state == RUNNABLE) {
++      totalTickets += p->currentTickets;
++    }
++    release(&p->lock);
++  }
++  return totalTickets;
++
++}
++
+ // Per-CPU process scheduler.
+ // Each CPU calls scheduler() after setting itself up.
+ // Scheduler never returns.  It loops, doing:
+@@ -441,6 +464,36 @@ wait(uint64 addr)
+ //  - swtch to start running that process.
+ //  - eventually that process transfers control
+ //    via swtch back to the scheduler.
++// void
++// scheduler(void)
++// {
++//   struct proc *p;
++//   struct cpu *c = mycpu();
++  
++//   c->proc = 0;
++//   for(;;){
++//     // Avoid deadlock by ensuring that devices can interrupt.
++//     intr_on();
++
++//     for(p = proc; p < &proc[NPROC]; p++) {
++//       acquire(&p->lock);
++//       if(p->state == RUNNABLE) {
++//         // Switch to chosen process.  It is the process's job
++//         // to release its lock and then reacquire it
++//         // before jumping back to us.
++//         p->state = RUNNING;
++//         c->proc = p;
++//         swtch(&c->context, &p->context);
++
++//         // Process is done running for now.
++//         // It should have changed its p->state before coming back.
++//         c->proc = 0;
++//       }
++//       release(&p->lock);
++//     }
++//   }
++// }
++
+ void
+ scheduler(void)
+ {
+@@ -452,19 +505,42 @@ scheduler(void)
+     // Avoid deadlock by ensuring that devices can interrupt.
+     intr_on();
+ 
++    long total_tickets = getTotalTickets();
++    long random_number = random_at_most(total_tickets);
++    int iterate_total_tickets = 0;
++
+     for(p = proc; p < &proc[NPROC]; p++) {
+       acquire(&p->lock);
+       if(p->state == RUNNABLE) {
+-        // Switch to chosen process.  It is the process's job
+-        // to release its lock and then reacquire it
+-        // before jumping back to us.
+-        p->state = RUNNING;
+-        c->proc = p;
+-        swtch(&c->context, &p->context);
+-
+-        // Process is done running for now.
+-        // It should have changed its p->state before coming back.
+-        c->proc = 0;
++        iterate_total_tickets += p->currentTickets;
++        // printf("Total Tickets %d Random Number: %d\n", total_tickets, random_number);
++        if (iterate_total_tickets > random_number) {
++          // Switch to chosen process.  It is the process's job
++          // to release its lock and then reacquire it
++          // before jumping back to us.
++          p->state = RUNNING;
++          c->proc = p;
++          int time_slice_start = ticks; 
++          swtch(&c->context, &p->context);
++          int time_slice_end = ticks;
++
++          // Minus one ticket and update
++          p->currentTickets--;
++          if (p->currentTickets == 0) {
++            p->currentTickets = p->originalTickets;
++          }
++
++          p->time_slice += (time_slice_end - time_slice_start);
++
++          // Process is done running for now.
++          // It should have changed its p->state before coming back.
++          c->proc = 0;
++
++          // printf("Running %d with tickets %d\n", p->pid, p->currentTickets);
++
++          release(&p->lock);
++          break;
++        }
+       }
+       release(&p->lock);
+     }
+@@ -677,7 +753,50 @@ procdump(void)
+       state = states[p->state];
+     else
+       state = "???";
+-    printf("%d %s %s", p->pid, state, p->name);
++    printf("%d %s %s %d", p->pid, state, p->name, p->originalTickets);
+     printf("\n");
+   }
+ }
++
++
++// New function for settickets
++
++int
++settickets(int ticket_number)
++{
++  struct proc *p = myproc();
++  acquire(&p->lock);
++  p->originalTickets = ticket_number;
++  p->currentTickets = ticket_number;
++  release(&p->lock);
++
++  return 0;
++}
++
++// New function for getpidinfo
++
++int 
++getpinfo(uint64 addr)
++{
++  struct proc *p;
++  struct pstat ps;
++  int i = 0;
++  
++  for(p = proc; p < &proc[NPROC]; p++) {
++    acquire(&p->lock);
++    ps.pid[i] = p->pid;
++    if (p->state == UNUSED) {
++      ps.inuse[i] = 0;
++    } else {
++      ps.inuse[i] = 1;
++    }
++    ps.tickets_current[i] = p->currentTickets;
++    ps.tickets_original[i] = p->originalTickets;
++    ps.time_slices[i] = p->time_slice;
++    release(&p->lock);
++    i++;
++  }
++  struct proc *currentproc = myproc(); 
++  int a = copyout(currentproc->pagetable, addr, (char *)&ps, sizeof(ps));
++  return a;
++}
+diff --git a/kernel/proc.h b/kernel/proc.h
+index d021857..ba97bf8 100644
+--- a/kernel/proc.h
++++ b/kernel/proc.h
+@@ -104,4 +104,9 @@ struct proc {
+   struct file *ofile[NOFILE];  // Open files
+   struct inode *cwd;           // Current directory
+   char name[16];               // Process name (debugging)
++
++  //Tickets for lottery
++  int originalTickets;
++  int currentTickets;
++  int time_slice;
+ };
+diff --git a/kernel/syscall.c b/kernel/syscall.c
+index ed65409..a314943 100644
+--- a/kernel/syscall.c
++++ b/kernel/syscall.c
+@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
+ extern uint64 sys_link(void);
+ extern uint64 sys_mkdir(void);
+ extern uint64 sys_close(void);
++extern uint64 sys_settickets(void);
++extern uint64 sys_getpinfo(void);
+ 
+ // An array mapping syscall numbers from syscall.h
+ // to the function that handles the system call.
+@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
+ [SYS_link]    sys_link,
+ [SYS_mkdir]   sys_mkdir,
+ [SYS_close]   sys_close,
++[SYS_settickets] sys_settickets,
++[SYS_getpinfo] sys_getpinfo
+ };
+ 
+ void
+diff --git a/kernel/syscall.h b/kernel/syscall.h
+index bc5f356..edc162b 100644
+--- a/kernel/syscall.h
++++ b/kernel/syscall.h
+@@ -20,3 +20,5 @@
+ #define SYS_link   19
+ #define SYS_mkdir  20
+ #define SYS_close  21
++#define SYS_settickets  22
++#define SYS_getpinfo  23
+diff --git a/kernel/sysproc.c b/kernel/sysproc.c
+index 1de184e..f622b29 100644
+--- a/kernel/sysproc.c
++++ b/kernel/sysproc.c
+@@ -89,3 +89,25 @@ sys_uptime(void)
+   release(&tickslock);
+   return xticks;
+ }
++
++//Methods for lottery scheduling
++
++uint64
++sys_settickets(void)
++{
++  int ticket_number;
++  argint(0, &ticket_number);
++  if (ticket_number <= 0) {
++    return -1;
++  }
++  printf("Ticket Number: %d\n", ticket_number);
++  return settickets(ticket_number);
++}
++
++uint64
++sys_getpinfo(void)
++{
++  uint64 addr;
++  argaddr(0, &addr);
++  return getpinfo(addr);
++}
+diff --git a/user/user.h b/user/user.h
+index 4d398d5..3babfa1 100644
+--- a/user/user.h
++++ b/user/user.h
+@@ -1,4 +1,5 @@
+ struct stat;
++#include "kernel/types.h"
+ 
+ // system calls
+ int fork(void);
+@@ -22,6 +23,8 @@ int getpid(void);
+ char* sbrk(int);
+ int sleep(int);
+ int uptime(void);
++int settickets(int);
++int getpinfo(uint64);
+ 
+ // ulib.c
+ int stat(const char*, struct stat*);
+diff --git a/user/usys.pl b/user/usys.pl
+index 01e426e..d2435c1 100755
+--- a/user/usys.pl
++++ b/user/usys.pl
+@@ -36,3 +36,5 @@ entry("getpid");
+ entry("sbrk");
+ entry("sleep");
+ entry("uptime");
++entry("settickets");
++entry("getpinfo");
diff --git a/1805038_2.patch b/1805038_2.patch
new file mode 100644
index 0000000..da48327
--- /dev/null
+++ b/1805038_2.patch
@@ -0,0 +1,374 @@
+diff --git a/Makefile b/Makefile
+index 39a99d7..dc414c2 100644
+--- a/Makefile
++++ b/Makefile
+@@ -28,7 +28,8 @@ OBJS = \
+   $K/sysfile.o \
+   $K/kernelvec.o \
+   $K/plic.o \
+-  $K/virtio_disk.o
++  $K/virtio_disk.o \
++  $K/rand.o
+ 
+ # riscv64-unknown-elf- or riscv64-linux-gnu-
+ # perhaps in /opt/riscv/bin
+@@ -132,6 +133,9 @@ UPROGS=\
+ 	$U/_grind\
+ 	$U/_wc\
+ 	$U/_zombie\
++	$U/_testticket\
++	$U/_testprocinfo\
++	$U/_testing\
+ 
+ fs.img: mkfs/mkfs README $(UPROGS)
+ 	mkfs/mkfs fs.img README $(UPROGS)
+@@ -153,7 +157,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
+ 	then echo "-gdb tcp::$(GDBPORT)"; \
+ 	else echo "-s -p $(GDBPORT)"; fi)
+ ifndef CPUS
+-CPUS := 3
++CPUS := 1
+ endif
+ 
+ QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
+diff --git a/kernel/defs.h b/kernel/defs.h
+index a3c962b..1388ec2 100644
+--- a/kernel/defs.h
++++ b/kernel/defs.h
+@@ -8,6 +8,7 @@ struct spinlock;
+ struct sleeplock;
+ struct stat;
+ struct superblock;
++struct pstat;
+ 
+ // bio.c
+ void            binit(void);
+@@ -106,6 +107,8 @@ void            yield(void);
+ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
+ int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
+ void            procdump(void);
++int             settickets(int ticket_number);
++int             getpinfo(uint64 addr);
+ 
+ // swtch.S
+ void            swtch(struct context*, struct context*);
+diff --git a/kernel/proc.c b/kernel/proc.c
+index 959b778..6c45795 100644
+--- a/kernel/proc.c
++++ b/kernel/proc.c
+@@ -5,6 +5,8 @@
+ #include "spinlock.h"
+ #include "proc.h"
+ #include "defs.h"
++#include "rand.h"
++#include "pstat.h"
+ 
+ struct cpu cpus[NCPU];
+ 
+@@ -56,6 +58,7 @@ procinit(void)
+       p->state = UNUSED;
+       p->kstack = KSTACK((int) (p - proc));
+   }
++  // sgenrand(unixtime()); //Seed with current time
+ }
+ 
+ // Must be called with interrupts disabled,
+@@ -124,6 +127,8 @@ allocproc(void)
+ found:
+   p->pid = allocpid();
+   p->state = USED;
++  p->originalTickets = 1;
++  p->currentTickets = 1;
+ 
+   // Allocate a trapframe page.
+   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
+@@ -169,6 +174,8 @@ freeproc(struct proc *p)
+   p->killed = 0;
+   p->xstate = 0;
+   p->state = UNUSED;
++  p->originalTickets = 0;
++  p->currentTickets = 0;
+ }
+ 
+ // Create a user page table for a given process, with no user memory,
+@@ -299,6 +306,10 @@ fork(void)
+   // copy saved user registers.
+   *(np->trapframe) = *(p->trapframe);
+ 
++  //Copy tickets
++  np->originalTickets = p->originalTickets;
++  np->currentTickets = p->currentTickets;
++
+   // Cause fork to return 0 in the child.
+   np->trapframe->a0 = 0;
+ 
+@@ -434,6 +445,22 @@ wait(uint64 addr)
+   }
+ }
+ 
++int
++getTotalTickets()
++{
++  struct proc *p;
++  int totalTickets = 0;
++  for(p = proc; p < &proc[NPROC]; p++) {
++    acquire(&p->lock);
++    if (p->state == RUNNABLE) {
++      totalTickets += p->currentTickets;
++    }
++    release(&p->lock);
++  }
++  return totalTickets;
++
++}
++
+ // Per-CPU process scheduler.
+ // Each CPU calls scheduler() after setting itself up.
+ // Scheduler never returns.  It loops, doing:
+@@ -441,6 +468,36 @@ wait(uint64 addr)
+ //  - swtch to start running that process.
+ //  - eventually that process transfers control
+ //    via swtch back to the scheduler.
++// void
++// scheduler(void)
++// {
++//   struct proc *p;
++//   struct cpu *c = mycpu();
++  
++//   c->proc = 0;
++//   for(;;){
++//     // Avoid deadlock by ensuring that devices can interrupt.
++//     intr_on();
++
++//     for(p = proc; p < &proc[NPROC]; p++) {
++//       acquire(&p->lock);
++//       if(p->state == RUNNABLE) {
++//         // Switch to chosen process.  It is the process's job
++//         // to release its lock and then reacquire it
++//         // before jumping back to us.
++//         p->state = RUNNING;
++//         c->proc = p;
++//         swtch(&c->context, &p->context);
++
++//         // Process is done running for now.
++//         // It should have changed its p->state before coming back.
++//         c->proc = 0;
++//       }
++//       release(&p->lock);
++//     }
++//   }
++// }
++
+ void
+ scheduler(void)
+ {
+@@ -452,19 +509,42 @@ scheduler(void)
+     // Avoid deadlock by ensuring that devices can interrupt.
+     intr_on();
+ 
++    long total_tickets = getTotalTickets();
++    long random_number = random_at_most(total_tickets);
++    int iterate_total_tickets = 0;
++
+     for(p = proc; p < &proc[NPROC]; p++) {
+       acquire(&p->lock);
+       if(p->state == RUNNABLE) {
+-        // Switch to chosen process.  It is the process's job
+-        // to release its lock and then reacquire it
+-        // before jumping back to us.
+-        p->state = RUNNING;
+-        c->proc = p;
+-        swtch(&c->context, &p->context);
+-
+-        // Process is done running for now.
+-        // It should have changed its p->state before coming back.
+-        c->proc = 0;
++        iterate_total_tickets += p->currentTickets;
++        // printf("Total Tickets %d Random Number: %d\n", total_tickets, random_number);
++        if (iterate_total_tickets > random_number) {
++          // Switch to chosen process.  It is the process's job
++          // to release its lock and then reacquire it
++          // before jumping back to us.
++          p->state = RUNNING;
++          c->proc = p;
++          int time_slice_start = ticks; 
++          swtch(&c->context, &p->context);
++          int time_slice_end = ticks;
++
++          // Minus one ticket and update
++          p->currentTickets--;
++          if (p->currentTickets == 0) {
++            p->currentTickets = p->originalTickets;
++          }
++
++          p->time_slice += (time_slice_end - time_slice_start);
++
++          // Process is done running for now.
++          // It should have changed its p->state before coming back.
++          c->proc = 0;
++
++          // printf("Running %d with tickets %d\n", p->pid, p->currentTickets);
++
++          release(&p->lock);
++          break;
++        }
+       }
+       release(&p->lock);
+     }
+@@ -677,7 +757,50 @@ procdump(void)
+       state = states[p->state];
+     else
+       state = "???";
+-    printf("%d %s %s", p->pid, state, p->name);
++    printf("%d %s %s %d", p->pid, state, p->name, p->originalTickets);
+     printf("\n");
+   }
+ }
++
++
++// New function for settickets
++
++int
++settickets(int ticket_number)
++{
++  struct proc *p = myproc();
++  acquire(&p->lock);
++  p->originalTickets = ticket_number;
++  p->currentTickets = ticket_number;
++  release(&p->lock);
++
++  return 0;
++}
++
++// New function for getpidinfo
++
++int 
++getpinfo(uint64 addr)
++{
++  struct proc *p;
++  struct pstat ps;
++  int i = 0;
++  
++  for(p = proc; p < &proc[NPROC]; p++) {
++    acquire(&p->lock);
++    ps.pid[i] = p->pid;
++    if (p->state == UNUSED) {
++      ps.inuse[i] = 0;
++    } else {
++      ps.inuse[i] = 1;
++    }
++    ps.tickets_current[i] = p->currentTickets;
++    ps.tickets_original[i] = p->originalTickets;
++    ps.time_slices[i] = p->time_slice;
++    release(&p->lock);
++    i++;
++  }
++  struct proc *currentproc = myproc(); 
++  int a = copyout(currentproc->pagetable, addr, (char *)&ps, sizeof(ps));
++  return a;
++}
+diff --git a/kernel/proc.h b/kernel/proc.h
+index d021857..ba97bf8 100644
+--- a/kernel/proc.h
++++ b/kernel/proc.h
+@@ -104,4 +104,9 @@ struct proc {
+   struct file *ofile[NOFILE];  // Open files
+   struct inode *cwd;           // Current directory
+   char name[16];               // Process name (debugging)
++
++  //Tickets for lottery
++  int originalTickets;
++  int currentTickets;
++  int time_slice;
+ };
+diff --git a/kernel/syscall.c b/kernel/syscall.c
+index ed65409..a314943 100644
+--- a/kernel/syscall.c
++++ b/kernel/syscall.c
+@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
+ extern uint64 sys_link(void);
+ extern uint64 sys_mkdir(void);
+ extern uint64 sys_close(void);
++extern uint64 sys_settickets(void);
++extern uint64 sys_getpinfo(void);
+ 
+ // An array mapping syscall numbers from syscall.h
+ // to the function that handles the system call.
+@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
+ [SYS_link]    sys_link,
+ [SYS_mkdir]   sys_mkdir,
+ [SYS_close]   sys_close,
++[SYS_settickets] sys_settickets,
++[SYS_getpinfo] sys_getpinfo
+ };
+ 
+ void
+diff --git a/kernel/syscall.h b/kernel/syscall.h
+index bc5f356..edc162b 100644
+--- a/kernel/syscall.h
++++ b/kernel/syscall.h
+@@ -20,3 +20,5 @@
+ #define SYS_link   19
+ #define SYS_mkdir  20
+ #define SYS_close  21
++#define SYS_settickets  22
++#define SYS_getpinfo  23
+diff --git a/kernel/sysproc.c b/kernel/sysproc.c
+index 1de184e..f622b29 100644
+--- a/kernel/sysproc.c
++++ b/kernel/sysproc.c
+@@ -89,3 +89,25 @@ sys_uptime(void)
+   release(&tickslock);
+   return xticks;
+ }
++
++//Methods for lottery scheduling
++
++uint64
++sys_settickets(void)
++{
++  int ticket_number;
++  argint(0, &ticket_number);
++  if (ticket_number <= 0) {
++    return -1;
++  }
++  printf("Ticket Number: %d\n", ticket_number);
++  return settickets(ticket_number);
++}
++
++uint64
++sys_getpinfo(void)
++{
++  uint64 addr;
++  argaddr(0, &addr);
++  return getpinfo(addr);
++}
+diff --git a/user/user.h b/user/user.h
+index 4d398d5..3babfa1 100644
+--- a/user/user.h
++++ b/user/user.h
+@@ -1,4 +1,5 @@
+ struct stat;
++#include "kernel/types.h"
+ 
+ // system calls
+ int fork(void);
+@@ -22,6 +23,8 @@ int getpid(void);
+ char* sbrk(int);
+ int sleep(int);
+ int uptime(void);
++int settickets(int);
++int getpinfo(uint64);
+ 
+ // ulib.c
+ int stat(const char*, struct stat*);
+diff --git a/user/usys.pl b/user/usys.pl
+index 01e426e..d2435c1 100755
+--- a/user/usys.pl
++++ b/user/usys.pl
+@@ -36,3 +36,5 @@ entry("getpid");
+ entry("sbrk");
+ entry("sleep");
+ entry("uptime");
++entry("settickets");
++entry("getpinfo");
diff --git a/1805038_3.patch b/1805038_3.patch
new file mode 100644
index 0000000..da48327
--- /dev/null
+++ b/1805038_3.patch
@@ -0,0 +1,374 @@
+diff --git a/Makefile b/Makefile
+index 39a99d7..dc414c2 100644
+--- a/Makefile
++++ b/Makefile
+@@ -28,7 +28,8 @@ OBJS = \
+   $K/sysfile.o \
+   $K/kernelvec.o \
+   $K/plic.o \
+-  $K/virtio_disk.o
++  $K/virtio_disk.o \
++  $K/rand.o
+ 
+ # riscv64-unknown-elf- or riscv64-linux-gnu-
+ # perhaps in /opt/riscv/bin
+@@ -132,6 +133,9 @@ UPROGS=\
+ 	$U/_grind\
+ 	$U/_wc\
+ 	$U/_zombie\
++	$U/_testticket\
++	$U/_testprocinfo\
++	$U/_testing\
+ 
+ fs.img: mkfs/mkfs README $(UPROGS)
+ 	mkfs/mkfs fs.img README $(UPROGS)
+@@ -153,7 +157,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
+ 	then echo "-gdb tcp::$(GDBPORT)"; \
+ 	else echo "-s -p $(GDBPORT)"; fi)
+ ifndef CPUS
+-CPUS := 3
++CPUS := 1
+ endif
+ 
+ QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
+diff --git a/kernel/defs.h b/kernel/defs.h
+index a3c962b..1388ec2 100644
+--- a/kernel/defs.h
++++ b/kernel/defs.h
+@@ -8,6 +8,7 @@ struct spinlock;
+ struct sleeplock;
+ struct stat;
+ struct superblock;
++struct pstat;
+ 
+ // bio.c
+ void            binit(void);
+@@ -106,6 +107,8 @@ void            yield(void);
+ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
+ int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
+ void            procdump(void);
++int             settickets(int ticket_number);
++int             getpinfo(uint64 addr);
+ 
+ // swtch.S
+ void            swtch(struct context*, struct context*);
+diff --git a/kernel/proc.c b/kernel/proc.c
+index 959b778..6c45795 100644
+--- a/kernel/proc.c
++++ b/kernel/proc.c
+@@ -5,6 +5,8 @@
+ #include "spinlock.h"
+ #include "proc.h"
+ #include "defs.h"
++#include "rand.h"
++#include "pstat.h"
+ 
+ struct cpu cpus[NCPU];
+ 
+@@ -56,6 +58,7 @@ procinit(void)
+       p->state = UNUSED;
+       p->kstack = KSTACK((int) (p - proc));
+   }
++  // sgenrand(unixtime()); //Seed with current time
+ }
+ 
+ // Must be called with interrupts disabled,
+@@ -124,6 +127,8 @@ allocproc(void)
+ found:
+   p->pid = allocpid();
+   p->state = USED;
++  p->originalTickets = 1;
++  p->currentTickets = 1;
+ 
+   // Allocate a trapframe page.
+   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
+@@ -169,6 +174,8 @@ freeproc(struct proc *p)
+   p->killed = 0;
+   p->xstate = 0;
+   p->state = UNUSED;
++  p->originalTickets = 0;
++  p->currentTickets = 0;
+ }
+ 
+ // Create a user page table for a given process, with no user memory,
+@@ -299,6 +306,10 @@ fork(void)
+   // copy saved user registers.
+   *(np->trapframe) = *(p->trapframe);
+ 
++  //Copy tickets
++  np->originalTickets = p->originalTickets;
++  np->currentTickets = p->currentTickets;
++
+   // Cause fork to return 0 in the child.
+   np->trapframe->a0 = 0;
+ 
+@@ -434,6 +445,22 @@ wait(uint64 addr)
+   }
+ }
+ 
++int
++getTotalTickets()
++{
++  struct proc *p;
++  int totalTickets = 0;
++  for(p = proc; p < &proc[NPROC]; p++) {
++    acquire(&p->lock);
++    if (p->state == RUNNABLE) {
++      totalTickets += p->currentTickets;
++    }
++    release(&p->lock);
++  }
++  return totalTickets;
++
++}
++
+ // Per-CPU process scheduler.
+ // Each CPU calls scheduler() after setting itself up.
+ // Scheduler never returns.  It loops, doing:
+@@ -441,6 +468,36 @@ wait(uint64 addr)
+ //  - swtch to start running that process.
+ //  - eventually that process transfers control
+ //    via swtch back to the scheduler.
++// void
++// scheduler(void)
++// {
++//   struct proc *p;
++//   struct cpu *c = mycpu();
++  
++//   c->proc = 0;
++//   for(;;){
++//     // Avoid deadlock by ensuring that devices can interrupt.
++//     intr_on();
++
++//     for(p = proc; p < &proc[NPROC]; p++) {
++//       acquire(&p->lock);
++//       if(p->state == RUNNABLE) {
++//         // Switch to chosen process.  It is the process's job
++//         // to release its lock and then reacquire it
++//         // before jumping back to us.
++//         p->state = RUNNING;
++//         c->proc = p;
++//         swtch(&c->context, &p->context);
++
++//         // Process is done running for now.
++//         // It should have changed its p->state before coming back.
++//         c->proc = 0;
++//       }
++//       release(&p->lock);
++//     }
++//   }
++// }
++
+ void
+ scheduler(void)
+ {
+@@ -452,19 +509,42 @@ scheduler(void)
+     // Avoid deadlock by ensuring that devices can interrupt.
+     intr_on();
+ 
++    long total_tickets = getTotalTickets();
++    long random_number = random_at_most(total_tickets);
++    int iterate_total_tickets = 0;
++
+     for(p = proc; p < &proc[NPROC]; p++) {
+       acquire(&p->lock);
+       if(p->state == RUNNABLE) {
+-        // Switch to chosen process.  It is the process's job
+-        // to release its lock and then reacquire it
+-        // before jumping back to us.
+-        p->state = RUNNING;
+-        c->proc = p;
+-        swtch(&c->context, &p->context);
+-
+-        // Process is done running for now.
+-        // It should have changed its p->state before coming back.
+-        c->proc = 0;
++        iterate_total_tickets += p->currentTickets;
++        // printf("Total Tickets %d Random Number: %d\n", total_tickets, random_number);
++        if (iterate_total_tickets > random_number) {
++          // Switch to chosen process.  It is the process's job
++          // to release its lock and then reacquire it
++          // before jumping back to us.
++          p->state = RUNNING;
++          c->proc = p;
++          int time_slice_start = ticks; 
++          swtch(&c->context, &p->context);
++          int time_slice_end = ticks;
++
++          // Minus one ticket and update
++          p->currentTickets--;
++          if (p->currentTickets == 0) {
++            p->currentTickets = p->originalTickets;
++          }
++
++          p->time_slice += (time_slice_end - time_slice_start);
++
++          // Process is done running for now.
++          // It should have changed its p->state before coming back.
++          c->proc = 0;
++
++          // printf("Running %d with tickets %d\n", p->pid, p->currentTickets);
++
++          release(&p->lock);
++          break;
++        }
+       }
+       release(&p->lock);
+     }
+@@ -677,7 +757,50 @@ procdump(void)
+       state = states[p->state];
+     else
+       state = "???";
+-    printf("%d %s %s", p->pid, state, p->name);
++    printf("%d %s %s %d", p->pid, state, p->name, p->originalTickets);
+     printf("\n");
+   }
+ }
++
++
++// New function for settickets
++
++int
++settickets(int ticket_number)
++{
++  struct proc *p = myproc();
++  acquire(&p->lock);
++  p->originalTickets = ticket_number;
++  p->currentTickets = ticket_number;
++  release(&p->lock);
++
++  return 0;
++}
++
++// New function for getpidinfo
++
++int 
++getpinfo(uint64 addr)
++{
++  struct proc *p;
++  struct pstat ps;
++  int i = 0;
++  
++  for(p = proc; p < &proc[NPROC]; p++) {
++    acquire(&p->lock);
++    ps.pid[i] = p->pid;
++    if (p->state == UNUSED) {
++      ps.inuse[i] = 0;
++    } else {
++      ps.inuse[i] = 1;
++    }
++    ps.tickets_current[i] = p->currentTickets;
++    ps.tickets_original[i] = p->originalTickets;
++    ps.time_slices[i] = p->time_slice;
++    release(&p->lock);
++    i++;
++  }
++  struct proc *currentproc = myproc(); 
++  int a = copyout(currentproc->pagetable, addr, (char *)&ps, sizeof(ps));
++  return a;
++}
+diff --git a/kernel/proc.h b/kernel/proc.h
+index d021857..ba97bf8 100644
+--- a/kernel/proc.h
++++ b/kernel/proc.h
+@@ -104,4 +104,9 @@ struct proc {
+   struct file *ofile[NOFILE];  // Open files
+   struct inode *cwd;           // Current directory
+   char name[16];               // Process name (debugging)
++
++  //Tickets for lottery
++  int originalTickets;
++  int currentTickets;
++  int time_slice;
+ };
+diff --git a/kernel/syscall.c b/kernel/syscall.c
+index ed65409..a314943 100644
+--- a/kernel/syscall.c
++++ b/kernel/syscall.c
+@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
+ extern uint64 sys_link(void);
+ extern uint64 sys_mkdir(void);
+ extern uint64 sys_close(void);
++extern uint64 sys_settickets(void);
++extern uint64 sys_getpinfo(void);
+ 
+ // An array mapping syscall numbers from syscall.h
+ // to the function that handles the system call.
+@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
+ [SYS_link]    sys_link,
+ [SYS_mkdir]   sys_mkdir,
+ [SYS_close]   sys_close,
++[SYS_settickets] sys_settickets,
++[SYS_getpinfo] sys_getpinfo
+ };
+ 
+ void
+diff --git a/kernel/syscall.h b/kernel/syscall.h
+index bc5f356..edc162b 100644
+--- a/kernel/syscall.h
++++ b/kernel/syscall.h
+@@ -20,3 +20,5 @@
+ #define SYS_link   19
+ #define SYS_mkdir  20
+ #define SYS_close  21
++#define SYS_settickets  22
++#define SYS_getpinfo  23
+diff --git a/kernel/sysproc.c b/kernel/sysproc.c
+index 1de184e..f622b29 100644
+--- a/kernel/sysproc.c
++++ b/kernel/sysproc.c
+@@ -89,3 +89,25 @@ sys_uptime(void)
+   release(&tickslock);
+   return xticks;
+ }
++
++//Methods for lottery scheduling
++
++uint64
++sys_settickets(void)
++{
++  int ticket_number;
++  argint(0, &ticket_number);
++  if (ticket_number <= 0) {
++    return -1;
++  }
++  printf("Ticket Number: %d\n", ticket_number);
++  return settickets(ticket_number);
++}
++
++uint64
++sys_getpinfo(void)
++{
++  uint64 addr;
++  argaddr(0, &addr);
++  return getpinfo(addr);
++}
+diff --git a/user/user.h b/user/user.h
+index 4d398d5..3babfa1 100644
+--- a/user/user.h
++++ b/user/user.h
+@@ -1,4 +1,5 @@
+ struct stat;
++#include "kernel/types.h"
+ 
+ // system calls
+ int fork(void);
+@@ -22,6 +23,8 @@ int getpid(void);
+ char* sbrk(int);
+ int sleep(int);
+ int uptime(void);
++int settickets(int);
++int getpinfo(uint64);
+ 
+ // ulib.c
+ int stat(const char*, struct stat*);
+diff --git a/user/usys.pl b/user/usys.pl
+index 01e426e..d2435c1 100755
+--- a/user/usys.pl
++++ b/user/usys.pl
+@@ -36,3 +36,5 @@ entry("getpid");
+ entry("sbrk");
+ entry("sleep");
+ entry("uptime");
++entry("settickets");
++entry("getpinfo");
diff --git a/Makefile b/Makefile
index 39a99d7..dc414c2 100644
--- a/Makefile
+++ b/Makefile
@@ -28,7 +28,8 @@ OBJS = \
   $K/sysfile.o \
   $K/kernelvec.o \
   $K/plic.o \
-  $K/virtio_disk.o
+  $K/virtio_disk.o \
+  $K/rand.o
 
 # riscv64-unknown-elf- or riscv64-linux-gnu-
 # perhaps in /opt/riscv/bin
@@ -132,6 +133,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_testticket\
+	$U/_testprocinfo\
+	$U/_testing\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +157,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..1388ec2 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct pstat;
 
 // bio.c
 void            binit(void);
@@ -106,6 +107,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             settickets(int ticket_number);
+int             getpinfo(uint64 addr);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..6c45795 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,8 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "rand.h"
+#include "pstat.h"
 
 struct cpu cpus[NCPU];
 
@@ -56,6 +58,7 @@ procinit(void)
       p->state = UNUSED;
       p->kstack = KSTACK((int) (p - proc));
   }
+  // sgenrand(unixtime()); //Seed with current time
 }
 
 // Must be called with interrupts disabled,
@@ -124,6 +127,8 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->originalTickets = 1;
+  p->currentTickets = 1;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -169,6 +174,8 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->originalTickets = 0;
+  p->currentTickets = 0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -299,6 +306,10 @@ fork(void)
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
 
+  //Copy tickets
+  np->originalTickets = p->originalTickets;
+  np->currentTickets = p->currentTickets;
+
   // Cause fork to return 0 in the child.
   np->trapframe->a0 = 0;
 
@@ -434,6 +445,22 @@ wait(uint64 addr)
   }
 }
 
+int
+getTotalTickets()
+{
+  struct proc *p;
+  int totalTickets = 0;
+  for(p = proc; p < &proc[NPROC]; p++) {
+    acquire(&p->lock);
+    if (p->state == RUNNABLE) {
+      totalTickets += p->currentTickets;
+    }
+    release(&p->lock);
+  }
+  return totalTickets;
+
+}
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -441,6 +468,36 @@ wait(uint64 addr)
 //  - swtch to start running that process.
 //  - eventually that process transfers control
 //    via swtch back to the scheduler.
+// void
+// scheduler(void)
+// {
+//   struct proc *p;
+//   struct cpu *c = mycpu();
+  
+//   c->proc = 0;
+//   for(;;){
+//     // Avoid deadlock by ensuring that devices can interrupt.
+//     intr_on();
+
+//     for(p = proc; p < &proc[NPROC]; p++) {
+//       acquire(&p->lock);
+//       if(p->state == RUNNABLE) {
+//         // Switch to chosen process.  It is the process's job
+//         // to release its lock and then reacquire it
+//         // before jumping back to us.
+//         p->state = RUNNING;
+//         c->proc = p;
+//         swtch(&c->context, &p->context);
+
+//         // Process is done running for now.
+//         // It should have changed its p->state before coming back.
+//         c->proc = 0;
+//       }
+//       release(&p->lock);
+//     }
+//   }
+// }
+
 void
 scheduler(void)
 {
@@ -452,19 +509,42 @@ scheduler(void)
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
 
+    long total_tickets = getTotalTickets();
+    long random_number = random_at_most(total_tickets);
+    int iterate_total_tickets = 0;
+
     for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
       if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
+        iterate_total_tickets += p->currentTickets;
+        // printf("Total Tickets %d Random Number: %d\n", total_tickets, random_number);
+        if (iterate_total_tickets > random_number) {
+          // Switch to chosen process.  It is the process's job
+          // to release its lock and then reacquire it
+          // before jumping back to us.
+          p->state = RUNNING;
+          c->proc = p;
+          int time_slice_start = ticks; 
+          swtch(&c->context, &p->context);
+          int time_slice_end = ticks;
+
+          // Minus one ticket and update
+          p->currentTickets--;
+          if (p->currentTickets == 0) {
+            p->currentTickets = p->originalTickets;
+          }
+
+          p->time_slice += (time_slice_end - time_slice_start);
+
+          // Process is done running for now.
+          // It should have changed its p->state before coming back.
+          c->proc = 0;
+
+          // printf("Running %d with tickets %d\n", p->pid, p->currentTickets);
+
+          release(&p->lock);
+          break;
+        }
       }
       release(&p->lock);
     }
@@ -677,7 +757,50 @@ procdump(void)
       state = states[p->state];
     else
       state = "???";
-    printf("%d %s %s", p->pid, state, p->name);
+    printf("%d %s %s %d", p->pid, state, p->name, p->originalTickets);
     printf("\n");
   }
 }
+
+
+// New function for settickets
+
+int
+settickets(int ticket_number)
+{
+  struct proc *p = myproc();
+  acquire(&p->lock);
+  p->originalTickets = ticket_number;
+  p->currentTickets = ticket_number;
+  release(&p->lock);
+
+  return 0;
+}
+
+// New function for getpidinfo
+
+int 
+getpinfo(uint64 addr)
+{
+  struct proc *p;
+  struct pstat ps;
+  int i = 0;
+  
+  for(p = proc; p < &proc[NPROC]; p++) {
+    acquire(&p->lock);
+    ps.pid[i] = p->pid;
+    if (p->state == UNUSED) {
+      ps.inuse[i] = 0;
+    } else {
+      ps.inuse[i] = 1;
+    }
+    ps.tickets_current[i] = p->currentTickets;
+    ps.tickets_original[i] = p->originalTickets;
+    ps.time_slices[i] = p->time_slice;
+    release(&p->lock);
+    i++;
+  }
+  struct proc *currentproc = myproc(); 
+  int a = copyout(currentproc->pagetable, addr, (char *)&ps, sizeof(ps));
+  return a;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..ba97bf8 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,9 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  //Tickets for lottery
+  int originalTickets;
+  int currentTickets;
+  int time_slice;
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..15fa3e5
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,21 @@
+#ifndef _PSTAT_H_
+
+#define _PSTAT_H_
+
+#include "param.h"
+
+struct pstat {
+
+    int pid[NPROC]; // the process ID of each process
+
+    int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+
+    int tickets_original[NPROC]; // the number of tickets each process  originally had
+
+    int tickets_current[NPROC]; // the number of tickets each process currently has
+
+    int time_slices[NPROC]; // the number of time slices each process has been scheduled
+
+};
+
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/kernel/rand.c b/kernel/rand.c
new file mode 100644
index 0000000..a5740db
--- /dev/null
+++ b/kernel/rand.c
@@ -0,0 +1,126 @@
+/* A C-program for MT19937: Real number version                */
+/*   genrand() generates one pseudorandom real number (double) */
+/* which is uniformly distributed on [0,1]-interval, for each  */
+/* call. sgenrand(seed) set initial values to the working area */
+/* of 624 words. Before genrand(), sgenrand(seed) must be      */
+/* called once. (seed is any 32-bit integer except for 0).     */
+/* Integer generator is obtained by modifying two lines.       */
+/*   Coded by Takuji Nishimura, considering the suggestions by */
+/* Topher Cooper and Marc Rieffel in July-Aug. 1997.           */
+
+/* This library is free software; you can redistribute it and/or   */
+/* modify it under the terms of the GNU Library General Public     */
+/* License as published by the Free Software Foundation; either    */
+/* version 2 of the License, or (at your option) any later         */
+/* version.                                                        */
+/* This library is distributed in the hope that it will be useful, */
+/* but WITHOUT ANY WARRANTY; without even the implied warranty of  */
+/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.            */
+/* See the GNU Library General Public License for more details.    */
+/* You should have received a copy of the GNU Library General      */
+/* Public License along with this library; if not, write to the    */
+/* Free Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA   */ 
+/* 02111-1307  USA                                                 */
+
+/* Copyright (C) 1997 Makoto Matsumoto and Takuji Nishimura.       */
+/* Any feedback is very welcome. For any question, comments,       */
+/* see http://www.math.keio.ac.jp/matumoto/emt.html or email       */
+/* matumoto@math.keio.ac.jp                                        */
+
+/* Period parameters */  
+#define N 624
+#define M 397
+#define MATRIX_A 0x9908b0df   /* constant vector a */
+#define UPPER_MASK 0x80000000 /* most significant w-r bits */
+#define LOWER_MASK 0x7fffffff /* least significant r bits */
+
+/* Tempering parameters */   
+#define TEMPERING_MASK_B 0x9d2c5680
+#define TEMPERING_MASK_C 0xefc60000
+#define TEMPERING_SHIFT_U(y)  (y >> 11)
+#define TEMPERING_SHIFT_S(y)  (y << 7)
+#define TEMPERING_SHIFT_T(y)  (y << 15)
+#define TEMPERING_SHIFT_L(y)  (y >> 18)
+
+#define RAND_MAX 0x7fffffff
+
+static unsigned long mt[N]; /* the array for the state vector  */
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+    for (mti=1; mti<N; mti++)
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+}
+
+long /* for integer generation */
+genrand()
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+        int kk;
+
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+            sgenrand(4357); /* a default initial seed is used   */
+
+        for (kk=0;kk<N-M;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        for (;kk<N-1;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+    y ^= TEMPERING_SHIFT_U(y);
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+    y ^= TEMPERING_SHIFT_L(y);
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+}
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+
+  // Truncated division is intentional
+  return x/bin_size;
+}
+
+float random(long seed) {
+    seed++;
+    long a = seed * 15485863;
+    return (a * a * a % 2038074743) / 2038074743;
+}
\ No newline at end of file
diff --git a/kernel/rand.h b/kernel/rand.h
new file mode 100644
index 0000000..f63aedf
--- /dev/null
+++ b/kernel/rand.h
@@ -0,0 +1,5 @@
+void sgenrand(unsigned long);
+long genrand(void);
+long random_at_most(long);
+
+float random(long seed);
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..a314943 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo] sys_getpinfo
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..edc162b 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets  22
+#define SYS_getpinfo  23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..f622b29 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,25 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+//Methods for lottery scheduling
+
+uint64
+sys_settickets(void)
+{
+  int ticket_number;
+  argint(0, &ticket_number);
+  if (ticket_number <= 0) {
+    return -1;
+  }
+  printf("Ticket Number: %d\n", ticket_number);
+  return settickets(ticket_number);
+}
+
+uint64
+sys_getpinfo(void)
+{
+  uint64 addr;
+  argaddr(0, &addr);
+  return getpinfo(addr);
+}
diff --git a/user/testing.c b/user/testing.c
new file mode 100644
index 0000000..71d67ea
--- /dev/null
+++ b/user/testing.c
@@ -0,0 +1,6 @@
+
+
+int main(int argc, char * argv[])
+{
+    return 0;
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..3ddb917
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,15 @@
+#include "user/user.h"
+#include "kernel/pstat.h"
+
+int main(int argc, char * argv[]) 
+{
+    struct pstat ps;
+    getpinfo((uint64)&ps);
+    printf("PID\t | In Use\t | Original Tickets\t | Current Tickets\t | Time Slices\n");
+    for (int i = 0; i < NPROC; i++) 
+    {
+        if (ps.pid[i] > 0 && ps.tickets_original[i] > 0)
+            printf("%d \t %d \t\t %d \t\t\t %d \t\t\t %d\n", ps.pid[i], ps.inuse[i], ps.tickets_original[i], ps.tickets_current[i], ps.time_slices[i]);
+    }
+    return 0;
+}
\ No newline at end of file
diff --git a/user/testticket.c b/user/testticket.c
new file mode 100644
index 0000000..bfe5d48
--- /dev/null
+++ b/user/testticket.c
@@ -0,0 +1,30 @@
+#include "user/user.h"
+
+int main(int argc, char * argv[]) 
+{
+    int numberOfTickets = 1;
+    if (argc > 0) {
+        numberOfTickets = atoi(argv[1]);
+    }
+    settickets(numberOfTickets);
+
+    // testticket 20 &; testticket 30 &; testticket 40 &; testprocinfo
+
+    // printf("\nfork test\n");
+    // int rc = fork();
+    // if (rc >= 0)
+    // {
+    //     printf("Fork successful\n");
+    // } else 
+    // {
+    //     printf("Fork unsuccessful\n");
+    // }
+    
+
+    while (1)
+    {
+        /* code */
+    }
+    
+    return 0;
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..3babfa1 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+#include "kernel/types.h"
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getpinfo(uint64);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d2435c1 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets");
+entry("getpinfo");
